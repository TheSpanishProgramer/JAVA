package Prog_Tarea07;

import java.io.File;
import java.util.ArrayList;
import javax.swing.*;

/**
 *
 * @author José Luis Comesaña
 * @version 7.0
 */
public class Principal extends javax.swing.JFrame {
    private ArrayList<Tenista> listaTenistas;
    private ArrayList<Torneo> listaTorneos;
    private int indice;
    private DefaultComboBoxModel dcbPalmares;
    private ListModel modeloTorneos;
    
    /*
     * Inicializamos todas las variables a usar
     */
    private void inicializar(){
        listaTenistas=new ArrayList<>();
        listaTorneos=new ArrayList<>();
        indice = -1;
        textoNombre.setText("");
        textoEdad.setText("");
        textoPuntuacion.setText("");
        setModeloTorneo();
        setModeloPalmares();
    }
    
    
    /**
     * Aplicamos el formato por defecto al componente comboBox
     */
    public void setModeloPalmares(){
        dcbPalmares=new DefaultComboBoxModel();
        comboPalmares.setModel(dcbPalmares);
    }
    
    /**
     * Aplicamos al componente JList el modelo de lista abstracto con tantos
     * elementos como tenga el ArrayList 'listaTorneos' y llenándolo con los 
     * datos de sus nombres
     */
    private void setModeloTorneo(){
        modeloTorneos=new AbstractListModel() {

            @Override
            public int getSize() {
                return listaTorneos.size();
            }

            @Override
            public Object getElementAt(int index) {
                return listaTorneos.get(index).getNombre();
            }
        };
        listaPalmares.setModel(modeloTorneos);
    }
    
    /**
     * Mostramos los datos del tenista actualizando la información que hasta
     * ese momento tuviesen las cajas de texto y el comboBox
     * 
     * @param <code>indice</code> Número que ocupa el tenista a mostrar dentro del ArrayList
     */
    public void mostrarDatosTenista(int indice){
        Tenista t = listaTenistas.get(indice);
        textoNombre.setText(t.getNombre());
        textoEdad.setText(String.valueOf(t.getEdad()));
        textoPuntuacion.setText(String.valueOf(t.getPuntuacionATP()));
        dcbPalmares=new DefaultComboBoxModel(t.getPalmares());
        comboPalmares.setModel(dcbPalmares);
        
        textoNombre.updateUI();
        textoEdad.updateUI();
        textoPuntuacion.updateUI();
        comboPalmares.updateUI();
    }
    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
        inicializar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        textoNombreBuscar = new javax.swing.JTextField();
        botonBuscar = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        textoNombre = new javax.swing.JTextField();
        textoEdad = new javax.swing.JTextField();
        textoPuntuacion = new javax.swing.JTextField();
        comboPalmares = new javax.swing.JComboBox();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaPalmares = new javax.swing.JList();
        añadirPalmaresBoton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        inicializar = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        cargarTenistaMenu = new javax.swing.JMenuItem();
        guardarTenistaMenu = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        cargarTorneoMenu = new javax.swing.JMenuItem();
        guardarTorneoMenu = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        salirMenu = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        añadirTenistaMenu = new javax.swing.JMenuItem();
        añadirTorneoMenu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("GesTenis");
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Buscar"));

        jLabel1.setText("Nombre del tenista");

        textoNombreBuscar.setToolTipText("Introduce el nombre del tenista");
        textoNombreBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textoNombreBuscarActionPerformed(evt);
            }
        });

        botonBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestenis/icons.png"))); // NOI18N
        botonBuscar.setToolTipText("Pulse para buscar al tenista");
        botonBuscar.setBorder(null);
        botonBuscar.setBorderPainted(false);
        botonBuscar.setContentAreaFilled(false);
        botonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBuscarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(textoNombreBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(botonBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textoNombreBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos tenista"));

        jLabel2.setText("Nombre:");

        jLabel3.setText("Edad:");

        jLabel4.setText("Puntuación ATP:");

        jLabel5.setText("Palmarés:");

        textoNombre.setEditable(false);
        textoNombre.setToolTipText("Muestra el nombre del tenista");

        textoEdad.setEditable(false);
        textoEdad.setToolTipText("Muestra la edad del tenista");

        textoPuntuacion.setEditable(false);
        textoPuntuacion.setToolTipText("Muestra la puntuación acumulada de los toneos ganados");

        comboPalmares.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboPalmares.setToolTipText("Torneos que ha ganado el tenista");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addGap(29, 29, 29)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textoNombre)
                    .addComponent(textoEdad)
                    .addComponent(textoPuntuacion)
                    .addComponent(comboPalmares, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(textoNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(textoEdad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(textoPuntuacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(comboPalmares, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Añadir Palmarés"));

        jLabel6.setText("Torneos:");

        listaPalmares.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        listaPalmares.setToolTipText("Torneos disponibles");
        jScrollPane1.setViewportView(listaPalmares);

        añadirPalmaresBoton.setText("Añadir");
        añadirPalmaresBoton.setToolTipText("Añadir el toneo seleccionado al palmarés del tenista");
        añadirPalmaresBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                añadirPalmaresBotonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(añadirPalmaresBoton)
                .addGap(19, 19, 19))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jLabel6)
                        .addGap(0, 7, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addContainerGap(22, Short.MAX_VALUE)
                        .addComponent(añadirPalmaresBoton)))
                .addContainerGap())
        );

        jMenu1.setMnemonic('A');
        jMenu1.setText("Archivo");
        jMenu1.setToolTipText("ficheros de tenistas y torneos, salir o inicializar datos");

        inicializar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        inicializar.setMnemonic('I');
        inicializar.setText("Inicializar");
        inicializar.setToolTipText("Inicializar todos los datos de torneos y tenistas");
        inicializar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inicializarActionPerformed(evt);
            }
        });
        jMenu1.add(inicializar);
        jMenu1.add(jSeparator3);

        cargarTenistaMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        cargarTenistaMenu.setMnemonic('T');
        cargarTenistaMenu.setText("Cargar Tenistas");
        cargarTenistaMenu.setToolTipText("Introduce en memoria los datos almacenados de los tenistas");
        cargarTenistaMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cargarTenistaMenuActionPerformed(evt);
            }
        });
        jMenu1.add(cargarTenistaMenu);

        guardarTenistaMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        guardarTenistaMenu.setMnemonic('G');
        guardarTenistaMenu.setText("Guardar Tenistas");
        guardarTenistaMenu.setToolTipText("Graba los datos de los tenistas en un fichero");
        guardarTenistaMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarTenistaMenuActionPerformed(evt);
            }
        });
        jMenu1.add(guardarTenistaMenu);
        jMenu1.add(jSeparator2);

        cargarTorneoMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        cargarTorneoMenu.setMnemonic('o');
        cargarTorneoMenu.setText("Cargar Torneos");
        cargarTorneoMenu.setToolTipText("Introduce en memoria los datos de los torneos");
        cargarTorneoMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cargarTorneoMenuActionPerformed(evt);
            }
        });
        jMenu1.add(cargarTorneoMenu);

        guardarTorneoMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        guardarTorneoMenu.setMnemonic('G');
        guardarTorneoMenu.setText("Guardar Torneos");
        guardarTorneoMenu.setToolTipText("Graba todos los torneos introducidos en disco");
        guardarTorneoMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarTorneoMenuActionPerformed(evt);
            }
        });
        jMenu1.add(guardarTorneoMenu);
        jMenu1.add(jSeparator1);

        salirMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        salirMenu.setMnemonic('S');
        salirMenu.setText("Salir");
        salirMenu.setToolTipText("Sale de la aplicación y descarga la memoria");
        salirMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirMenuActionPerformed(evt);
            }
        });
        jMenu1.add(salirMenu);

        jMenuBar1.add(jMenu1);

        jMenu2.setMnemonic('d');
        jMenu2.setText("Añadir");
        jMenu2.setToolTipText("Añade tenistas o torneos");

        añadirTenistaMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        añadirTenistaMenu.setMnemonic('n');
        añadirTenistaMenu.setText("Tenista");
        añadirTenistaMenu.setToolTipText("Añadimos datos al fichero de tenistas");
        añadirTenistaMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                añadirTenistaMenuActionPerformed(evt);
            }
        });
        jMenu2.add(añadirTenistaMenu);

        añadirTorneoMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        añadirTorneoMenu.setMnemonic('r');
        añadirTorneoMenu.setText("Torneo");
        añadirTorneoMenu.setToolTipText("Añadimos datos al fichero de torneos");
        añadirTorneoMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                añadirTorneoMenuActionPerformed(evt);
            }
        });
        jMenu2.add(añadirTorneoMenu);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Inicializa los datos cuando pulsamos sobre esta opción del menú
     */ 
    private void inicializarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inicializarActionPerformed
        inicializar();
        JOptionPane.showMessageDialog(this, "Datos de torneos y tenistas inicializados", "Inicialización", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_inicializarActionPerformed

    /**
     * Al pulsar sobre el botón de Añadir comprobamos que tengamos un torneo
     * seleccionado y que exista el tenista. Si es así se añade al palmarés
     * de ese tenista el torneo seleccionado en el JList. En caso contrario nos
     * muestra una ventana de error
     */
    private void añadirPalmaresBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_añadirPalmaresBotonActionPerformed
       if (listaPalmares.getSelectedIndex() == -1) {
          JOptionPane.showMessageDialog(this, "No hay ningún torneo seleccionado", "Torneo no seleccionado", JOptionPane.ERROR_MESSAGE);
       } else if (this.indice != -1) {
          listaTenistas.get(indice).añadirPalmares(listaTorneos.get(listaPalmares.getSelectedIndex()));
          mostrarDatosTenista(indice);
       } else {
          JOptionPane.showMessageDialog(this, "No hay ningún tenista seleccionado", "Tenista no seleccionado", JOptionPane.ERROR_MESSAGE);
       }
    }//GEN-LAST:event_añadirPalmaresBotonActionPerformed

    /**
     * Cuando pulsamos sobre la opción del menú Añadir/Tenista se abre la ventana
     * de JDTenista y cuando pulsemos sobre el botón Aceptar de de dicha ventana
     * se introducirán todos los datos en listaTenista
     */
    private void añadirTenistaMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_añadirTenistaMenuActionPerformed
       JDTenista jdTenista = new JDTenista(this, true);
       jdTenista.setVisible(true);
       if (jdTenista.isHaPulsadoAceptar()) {
          listaTenistas.add(jdTenista.getTenista());
       }
    }//GEN-LAST:event_añadirTenistaMenuActionPerformed

    /**
     * Cuando pulsamos el botón 'Buscar' comprobamos que no esté vacía la lista
     * de tenistas y comprobamos los nombres de dicha lista con el valor que 
     * hayamos introducido en la caja de texto de nombre del tenista. Si se
     * encuentra llamamos a 'mostrarDatosTenista' pasándole el número de la
     * posición en la que fue hallado, y en caso contrario mostramos en una 
     * ventana independiente dicho error
     */
    private void botonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBuscarActionPerformed
        if (!listaTenistas.isEmpty()) {
          int i = 0;
          Tenista t = null;
          boolean encontrado = false;
          while (!encontrado && i < listaTenistas.size()) {
             t = listaTenistas.get(i);
             if (t.getNombre().equalsIgnoreCase(textoNombreBuscar.getText())) {
                encontrado = true;
             } else {
                i++;

             }
          }
          if (encontrado) {
             indice = i;
             mostrarDatosTenista(indice);
          } else {
             JOptionPane.showMessageDialog(this, "El tenista " + textoNombreBuscar.getText() + " no ha sido encontrado", "No encontrado", JOptionPane.ERROR_MESSAGE);
          }

       } else {
          JOptionPane.showMessageDialog(this, "No se han añadido tenistas a la lista", "Lista vacía", JOptionPane.ERROR_MESSAGE);

       }
    }//GEN-LAST:event_botonBuscarActionPerformed

    /**
     * Al pulsar sobre la opción del menú 'Cargar Tenista' abrimos una ventana
     * de apertura de ficheros y comprobamos que se haya pulsado el botón 'Aceptar'
     * El valor del fichero seleccionado se carga en 'listaTenistas' y si está
     * vacío (no contiene datos) nos muestra una ventana informando del error, y 
     * en caso contrario mostrará una ventana informativa del éxito de la carga
     * de datos.
     */
    private void cargarTenistaMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cargarTenistaMenuActionPerformed
       JFileChooser jfcAbrir = new JFileChooser();
       int seleccion = jfcAbrir.showOpenDialog(this);
       if (seleccion == JFileChooser.APPROVE_OPTION) {
          File fichero = jfcAbrir.getSelectedFile();
          if ((listaTenistas = Tenista.cargar(fichero)) != null) {
             JOptionPane.showMessageDialog(this, "Fichero cargado correctamente", "Carga correcto", JOptionPane.INFORMATION_MESSAGE);
          } else {
             JOptionPane.showMessageDialog(this, "No ha sido posible abrir el fichero", "ERROR", JOptionPane.ERROR_MESSAGE);
          }
       }

    }//GEN-LAST:event_cargarTenistaMenuActionPerformed

    /**
     * Para guardar los tenistas primero abrimos una ventana de ficheros en forma
     * de grabación. Cuando pulsamos 'Aceptar' se llama al método guardar de la
     * clase Tenista que se encargará de volcar el contenido de 'listaTenistas' 
     * en 'fichero' y que nos devuelva 'true' si todo ha ido bien. En cualquier 
     * caso nos mostrará una ventana informativa de lo ocurrido
     */
    private void guardarTenistaMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarTenistaMenuActionPerformed
       JFileChooser jfcAbrir = new JFileChooser();
       int seleccion = jfcAbrir.showSaveDialog(this);
       if (seleccion == JFileChooser.APPROVE_OPTION) {
          File fichero = jfcAbrir.getSelectedFile();
          if (Tenista.guardar(listaTenistas, fichero) == true) {
             JOptionPane.showMessageDialog(this, "Fichero guardado correctamente", "Almacenamiento correcto", JOptionPane.INFORMATION_MESSAGE);

          } else {
             JOptionPane.showMessageDialog(this, "Error al guardar el fichero", "ERROR", JOptionPane.ERROR_MESSAGE);
          }
       }

    }//GEN-LAST:event_guardarTenistaMenuActionPerformed

    /**
     * Al pulsar sobre la opción del menú 'Cargar Torneo' abrimos una ventana
     * de apertura de ficheros y comprobamos que se haya pulsado el botón 'Aceptar'
     * El valor del fichero seleccionado se carga en 'listaTorneos' y si está
     * vacío (no contiene datos) nos muestra una ventana informando del error, y 
     * en caso contrario mostrará una ventana informativa del éxito de la carga
     * de datos.
     */
    private void cargarTorneoMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cargarTorneoMenuActionPerformed
       JFileChooser jfcAbrir = new JFileChooser();
       int seleccion = jfcAbrir.showOpenDialog(this);
       if (seleccion == JFileChooser.APPROVE_OPTION) {
          File fichero = jfcAbrir.getSelectedFile();
          if ((listaTorneos = Torneo.cargar(fichero)) != null) {
             listaPalmares.updateUI();
             JOptionPane.showMessageDialog(this, "Fichero cargado correctamente", "Carga correcto", JOptionPane.INFORMATION_MESSAGE);
          } else {
             JOptionPane.showMessageDialog(this, "No ha sido posible abrir el fichero", "ERROR", JOptionPane.ERROR_MESSAGE);
          }
       }

    }//GEN-LAST:event_cargarTorneoMenuActionPerformed

    /**
     * Para guardar los torneos primero abrimos una ventana de ficheros en forma
     * de grabación. Cuando pulsamos 'Aceptar' se llama al método guardar de la
     * clase Torneo que se encargará de volcar el contenido de 'listaTorneos' en
     * 'fichero' y que nos devuelva 'true' si todo ha ido bien. En cualquier caso 
     * nos mostrará una ventana informativa de lo ocurrido
     */
    private void guardarTorneoMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarTorneoMenuActionPerformed
       JFileChooser jfcAbrir = new JFileChooser();
       int seleccion = jfcAbrir.showSaveDialog(this);
       if (seleccion == JFileChooser.APPROVE_OPTION) {
          File fichero = jfcAbrir.getSelectedFile();
          if (Torneo.guardar(listaTorneos, fichero) == true) {
             JOptionPane.showMessageDialog(this, "Fichero guardado correctamente", "Almacenamiento correcto", JOptionPane.INFORMATION_MESSAGE);

          } else {
             JOptionPane.showMessageDialog(this, "Error al guardar el fichero", "ERROR", JOptionPane.ERROR_MESSAGE);
          }
       }

    }//GEN-LAST:event_guardarTorneoMenuActionPerformed

    /**
     * Al pulsar en la opción 'Salir' del menú 'Archivo' salimos al sistema
     * vaciando todos los bufferes
     */
    private void salirMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirMenuActionPerformed
        System.exit(0);
    }//GEN-LAST:event_salirMenuActionPerformed

    /**
     * Si pulsamos sobre la opción del menú 'Archivo/Añadir Torneo' hacemos
     * visible la ventana JDTorneo. Cuando se pulsa 'Aceptar' dentro de dicha
     * ventana se añaden los datos introducidos en el ArrayList 'listaTorneos'
     * y se actualizan los datos visualizados en el JList 'listaPalmares'
     */
    private void añadirTorneoMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_añadirTorneoMenuActionPerformed
       JDTorneo jdTorneo = new JDTorneo(this, true);
       jdTorneo.setVisible(true);
       if (jdTorneo.isHaPulsadoAceptar()) {
          listaTorneos.add(jdTorneo.getTorneo());
          listaPalmares.updateUI();
       }
    }//GEN-LAST:event_añadirTorneoMenuActionPerformed

    /**
     * Cuando estamos tecleando el dato de un tenista a buscar y pulsamos Intro
     * realizamos la misma acción que si hubiésemos pulsado el botón 'Buscar'
     */
    private void textoNombreBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textoNombreBuscarActionPerformed
        botonBuscarActionPerformed(evt);
    }//GEN-LAST:event_textoNombreBuscarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Principal().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton añadirPalmaresBoton;
    private javax.swing.JMenuItem añadirTenistaMenu;
    private javax.swing.JMenuItem añadirTorneoMenu;
    private javax.swing.JButton botonBuscar;
    private javax.swing.JMenuItem cargarTenistaMenu;
    private javax.swing.JMenuItem cargarTorneoMenu;
    private javax.swing.JComboBox comboPalmares;
    private javax.swing.JMenuItem guardarTenistaMenu;
    private javax.swing.JMenuItem guardarTorneoMenu;
    private javax.swing.JMenuItem inicializar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JList listaPalmares;
    private javax.swing.JMenuItem salirMenu;
    private javax.swing.JTextField textoEdad;
    private javax.swing.JTextField textoNombre;
    private javax.swing.JTextField textoNombreBuscar;
    private javax.swing.JTextField textoPuntuacion;
    // End of variables declaration//GEN-END:variables
}

